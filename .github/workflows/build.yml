name: Build
on:
  push:
    branches:
      - 'main'
      - 'dev'
    tags-ignore:
      - '**'
    paths-ignore:
      - 'LICENSE'
      - '**.md'
  pull_request:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      test_release:
        description: 'Test release?'
        required: true
        default: 'false'

jobs:
  build-ios:
    name: Jitterbug
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        run: |
          xcodebuild archive -archivePath Jitterbug -scheme Jitterbug -configuration Release CODE_SIGNING_ALLOWED=NO
          codesign --force --sign - --timestamp=none --preserve-metadata=identifier,entitlements,flags "Jitterbug.xcarchive/Products/Applications/Jitterbug.app/PlugIns/OpenSSL.framework"
          codesign --force --sign - --timestamp=none --preserve-metadata=identifier,entitlements,flags "Jitterbug.xcarchive/Products/Applications/Jitterbug.app/Frameworks/OpenSSL.framework"
          codesign --force --sign - --entitlements "JitterbugTunnel/JitterbugTunnel.entitlements" --timestamp=none "Jitterbug.xcarchive/Products/Applications/Jitterbug.app/PlugIns/JitterbugTunnel.appex"
          codesign --force --sign - --entitlements "Jitterbug/Jitterbug.entitlements" --timestamp=none "Jitterbug.xcarchive/Products/Applications/Jitterbug.app"
      - name: Compress
        run: tar cf Jitterbug.xcarchive.tgz Jitterbug.xcarchive
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Jitterbug
          path: Jitterbug.xcarchive.tgz
  build-ios-lite:
    name: Jitterbug Lite
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        run: xcodebuild archive -archivePath JitterbugLite -scheme JitterbugLite -configuration Release CODE_SIGNING_ALLOWED=NO
      - name: Compress
        run: tar cf JitterbugLite.xcarchive.tgz JitterbugLite.xcarchive
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: JitterbugLite
          path: JitterbugLite.xcarchive.tgz
  build-macos-ui:
    name: Jitterbug (macOS)
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        run: xcodebuild archive -archivePath JitterbugMac -scheme JitterbugMac -configuration Release
      - name: Compress
        run: tar cf JitterbugMac.xcarchive.tgz JitterbugMac.xcarchive
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: JitterbugMac
          path: JitterbugMac.xcarchive.tgz
  build-macos:
    name: JitterbugPair (macOS)
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Dependencies
        run: brew install meson openssl@1.1 libusbmuxd libimobiledevice
      - name: Build
        run: meson --prefix /usr/local --buildtype=release build && cd build && meson compile
        env:
          PKG_CONFIG_PATH: /usr/local/opt/openssl@1.1/lib/pkgconfig
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: jitterbugpair-macos
          path: build/jitterbugpair
  build-ubuntu:
    name: JitterbugPair (Ubuntu)
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Dependencies
        run: sudo apt install meson libgcrypt-dev libusbmuxd-dev libimobiledevice-dev libunistring-dev
      - name: Build
        run: meson --prefix /usr --buildtype=release build && cd build && ninja
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: jitterbugpair-linux
          path: build/jitterbugpair
  build-windows:
    name: JitterbugPair (Windows)
    runs-on: windows-2019
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            mingw64/mingw-w64-x86_64-gcc
            mingw64/mingw-w64-x86_64-pkg-config
            mingw64/mingw-w64-x86_64-meson
            mingw64/mingw-w64-x86_64-libusbmuxd
            mingw64/mingw-w64-x86_64-libimobiledevice
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        run: msys2 -c 'meson --buildtype=release build && cd build && meson compile'
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: jitterbugpair-win64
          path: |
            build/jitterbugpair.exe
            build/libwinpthread-1.dll
  package-ipa:
    name: Package IPA
    runs-on: ubuntu-20.04
    needs: build-ios
    if: github.event_name == 'release' || github.event.inputs.test_release == 'true'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: Jitterbug
      - name: Package IPA
        run: |
          tar xf Jitterbug.xcarchive.tgz
          mv Jitterbug.xcarchive/Products/Applications Payload
          zip -r Jitterbug.ipa Payload -x "._*" -x ".DS_Store" -x "__MACOSX"
      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: Jitterbug.ipa
          asset_name: Jitterbug.ipa
          asset_content_type: application/octet-stream
      - name: Send Dispatch Event
        if: github.event_name == 'release'
        continue-on-error: true
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ secrets.DISPATCH_ALTSTORE_REPO_NAME }}
          event-type: new-release
  package-ipa-lite:
    name: Package IPA Lite
    runs-on: ubuntu-20.04
    needs: build-ios-lite
    if: github.event_name == 'release' || github.event.inputs.test_release == 'true'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: JitterbugLite
      - name: Package IPA
        run: |
          tar xf JitterbugLite.xcarchive.tgz
          mv JitterbugLite.xcarchive/Products/Applications Payload
          zip -r JitterbugLite.ipa Payload -x "._*" -x ".DS_Store" -x "__MACOSX"
      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: JitterbugLite.ipa
          asset_name: JitterbugLite.ipa
          asset_content_type: application/octet-stream
      - name: Send Dispatch Event
        if: github.event_name == 'release'
        continue-on-error: true
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ secrets.DISPATCH_ALTSTORE_REPO_NAME }}
          event-type: new-release
  package-dmg:
    name: Package DMG
    runs-on: macos-10.15
    needs: build-macos-ui
    if: github.event_name == 'release' || github.event.inputs.test_release == 'true'
    steps:
      - name: Import signing certificate into keychain
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          p12-password: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: JitterbugMac
      - name: Sign Binaries
        run: |
          tar xf JitterbugMac.xcarchive.tgz
          codesign --force --sign "Developer ID Application" --timestamp --options runtime "JitterbugMac.xcarchive/Products/Applications/Jitterbug.app/Contents/Frameworks/OpenSSL.framework"
          codesign --force --sign "Developer ID Application" --timestamp --options runtime "JitterbugMac.xcarchive/Products/Applications/Jitterbug.app"
      - name: Create DMG
        run: hdiutil create -fs HFS+ -srcfolder "JitterbugMac.xcarchive/Products/Applications/Jitterbug.app" -volname "Jitterbug" "Jitterbug.dmg"
      - name: Notarize app
        run: npx notarize-cli --file "Jitterbug.dmg" --bundle-id "com.osy86.Jitterbug"
        env:
          NOTARIZE_USERNAME: ${{ secrets.SIGNING_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: Jitterbug.dmg
          asset_name: Jitterbug.dmg
          asset_content_type: application/octet-stream
  package-pair:
    name: Package JitterbugPair
    runs-on: ubuntu-20.04
    needs: [build-macos, build-ubuntu, build-windows]
    if: github.event_name == 'release' || github.event.inputs.test_release == 'true'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
      - name: Fix Permissions
        run: for i in jitterbugpair-*/; do chmod +x $i/* ; zip -r -j "${i%/}.zip" "$i"; done
      - name: Upload macOS
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: jitterbugpair-macos.zip
          asset_name: jitterbugpair-macos.zip
          asset_content_type: application/octet-stream
      - name: Upload Linux
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: jitterbugpair-linux.zip
          asset_name: jitterbugpair-linux.zip
          asset_content_type: application/octet-stream
      - name: Upload Windows
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: jitterbugpair-win64.zip
          asset_name: jitterbugpair-win64.zip
          asset_content_type: application/octet-stream
